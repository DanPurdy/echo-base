//==============================================================================
//
//  spec/scss/utilities/_palettes.scss
//
//  ----------------------------------------------------------------------------
//  Table of contents
//  ----------------------------------------------------------------------------
//  a. Custom test dependencies
//  b. Function/mixin dependencies
//  c. Build tests
//  d. Run tests
//
//
//  @copyright 2015, Loft Digital, www.weareloft.com
//
//==============================================================================


//==============================================================================
//  Custom test dependencies
//==============================================================================

$custom-palette-base: rgb(255, 0, 0);

$custom-palettes: (
    custom-palette: (
        base: $custom-palette-base
    )
);




//==============================================================================
//  Function/mixin dependencies
//==============================================================================

@import "../../../app/scss/echo-base/defaults/palettes";




//==============================================================================
//  Build tests
//==============================================================================

//  Setup palettes - setup-palettes()
//==============================================================================

/// Test if setup-palettes() returns an object of type map
///
/// @group Tests

@mixin palettes-return-map() {

    @include test('setup-palettes') {
        // Values to compare
        $test: type-of(setup-palettes());
        $expect: map;

        @include assert-equal($test, $expect, 'Returns a map');
    }

}



/// Test if setup-palettes() successfully merges the default and custom
/// palette maps by checking for the existance of a custom key
///
/// @group Tests

@mixin palettes-has-custom-key() {

    @include test('setup-palettes') {
        // Setup
        $palettes: setup-palettes();

        // Values to compare
        $test: map-has-key($palettes, custom-palette);
        $expect: true;

        @include assert-equal($test, $expect, 'Returns a merged map of default & custom palettes');
    }

}



/// Test if setup-palettes() successfully merges the default and custom
/// palette maps by checking the value of a custom key
///
/// @group Tests

@mixin palettes-return-custom-value() {

    @include test('setup-palettes') {
        // Setup
        $palettes: setup-palettes();
        $custom-color: map-get($palettes, custom-palette);

        // Values to compare
        $test: map-get($custom-color, base);
        $expect: $custom-palette-base;

        @include assert-equal($test, $expect, 'Returns a custom palette value');
    }

}



//==============================================================================
//  Run tests
//==============================================================================

//  Setup palettes - setup-palettes()
//==============================================================================

@include test-module('Setup palettes') {

    @include palettes-return-map();
    @include palettes-has-custom-key();
    @include palettes-return-custom-value();

}
