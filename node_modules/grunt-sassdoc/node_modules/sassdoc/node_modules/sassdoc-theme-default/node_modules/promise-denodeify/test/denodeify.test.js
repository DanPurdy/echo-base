/* global describe, it */

'use strict';

var assert    = require('extended-assert');
var denodeify = require('../lib/denodeify');

describe('denodeify()', function () {
    it('returns a new wrapper function', function () {
        var nodeFunction = function () {};
        var Promise      = function () {};

        var wrapper1 = denodeify(nodeFunction, Promise);
        var wrapper2 = denodeify(nodeFunction, Promise);

        assert.strictEqual(typeof wrapper1, 'function');
        assert.strictEqual(typeof wrapper2, 'function');

        assert.strictEqual(wrapper1, wrapper1);
        assert.strictEqual(wrapper2, wrapper2);

        assert.notStrictEqual(wrapper1, wrapper2);
    });

    it('throws a type error', function () {
        assert.throwsError(function () {
            denodeify();
        }, 'TypeError', 'Illegal argument: undefined');

        assert.throwsError(function () {
            denodeify({});
        }, 'TypeError', 'Illegal argument: {}');

        assert.throwsError(function () {
            denodeify(function () {});
        }, 'TypeError', 'Illegal argument: undefined');

        assert.throwsError(function () {
            denodeify(function () {}, {});
        }, 'TypeError', 'Illegal argument: {}');

        assert.throwsError(function () {
            denodeify(function () {}, function () {}, 1);
        }, 'TypeError', 'Illegal argument: 1');
    });

    describe('a wrapper function', function () {
        it('returns a new promise', function () {
            var called = 0;

            var nodeFunction = function () {};

            var Promise = function () {
                assert.strictEqual(this instanceof Promise, true);

                called += 1;
            };

            var wrapper = denodeify(nodeFunction, Promise);

            assert.strictEqual(wrapper() instanceof Promise, true);

            assert.strictEqual(called, 1);
        });

        it('calls the specified node function with the wrapper\'s context', function () {
            var called  = 0;
            var context = {};

            var nodeFunction = function () {
                assert.strictEqual(this, context);

                called += 1;
            };

            var Promise = function (executor) {
                executor();
            };

            var wrapper = denodeify(nodeFunction, Promise);

            wrapper.call(context);

            assert.strictEqual(called, 1);
        });

        it('calls the specified node function with the wrapper\'s arguments plus a callback', function () {
            var called  = 0;

            var nodeFunction = function (foo, bar, baz, callback) {
                assert.strictEqual(foo, 'foo');
                assert.strictEqual(bar, 'bar');
                assert.strictEqual(baz, 'baz');
                assert.strictEqual(typeof callback, 'function');

                called += 1;
            };

            var Promise = function (executor) {
                executor();
            };

            var wrapper = denodeify(nodeFunction, Promise);

            wrapper.apply(null, [
                'foo',
                'bar',
                'baz'
            ]);

            assert.strictEqual(called, 1);
        });

        it('calls the specified node function with only a callback', function () {
            var called  = 0;

            var nodeFunction = function (callback) {
                assert.strictEqual(typeof callback, 'function');

                called += 1;
            };

            var Promise = function (executor) {
                executor();
            };

            var wrapper = denodeify(nodeFunction, Promise, true);

            wrapper.apply(null, [
                'foo',
                'bar',
                'baz'
            ]);

            assert.strictEqual(called, 1);
        });
    });

    describe('a promise', function () {
        it('calls the executor\'s resolve function with the callback\'s response argument', function () {
            var expected = {};

            var nodeFunction = function (callback) {
                callback(null, expected);
            };

            var called  = 0;

            var resolve = function (actual) {
                assert.strictEqual(actual, expected);

                called += 1;
            };

            var Promise = function (executor) {
                executor(resolve);
            };

            var wrapper = denodeify(nodeFunction, Promise);

            wrapper();

            assert.strictEqual(called, 1);
        });

        it('calls the executor\'s reject function with the callback\'s error argument', function () {
            var expected = {};

            var nodeFunction = function (callback) {
                callback(expected);
            };

            var called  = 0;

            var reject = function (actual) {
                assert.strictEqual(actual, expected);

                called += 1;
            };

            var Promise = function (executor) {
                executor(null, reject);
            };

            var wrapper = denodeify(nodeFunction, Promise);

            wrapper();

            assert.strictEqual(called, 1);
        });
    });
});
