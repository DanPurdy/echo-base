"use strict";

var _to5Helpers = require("6to5-runtime/helpers");

var _core = require("6to5-runtime/core-js");

exports.denodeify = denodeify;
exports.defer = defer;


/**
 * Get the base directory of given glob pattern (see `glob2base`).
 *
 * If it's an array, take the first one.
 *
 * @param {Array|String} src Glob pattern or array of glob patterns.
 * @return {String}
 */
exports.g2b = g2b;
var glob2base = require("glob2base");
var Glob = require("glob").Glob;

// Namespace delimiters.
var nsDelimiters = ["::", ":", "\\.", "/"];
var ns = new RegExp(nsDelimiters.join("|"), "g");

// Split a namespace on possible namespace delimiters.
var splitNamespace = exports.splitNamespace = function (value) {
  return value.split(ns);
};

function denodeify(fn) {
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return new _core.Promise(function (resolve, reject) {
      fn.apply(undefined, _to5Helpers.toArray(args).concat([function (err) {
        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        if (err) {
          reject(err);
          return;
        }

        resolve.apply(undefined, _to5Helpers.toArray(args));
      }]));
    });
  };
}

function defer() {
  var resolve = undefined,
      reject = undefined;

  var promise = new _core.Promise(function (resolve_, reject_) {
    resolve = resolve_;
    reject = reject_;
  });

  return {
    promise: promise,
    resolve: resolve,
    reject: reject };
}function g2b(src) {
  return glob2base(new Glob([].concat(src)[0]));
}

/**
 * Type checking helpers.
 */
var toString = function (arg) {
  return Object.prototype.toString.call(arg);
};

var is = exports.is = {
  undef: function (arg) {
    return arg === void 0;
  },
  string: function (arg) {
    return typeof arg === "string";
  },
  "function": function (arg) {
    return typeof arg === "function";
  },
  object: function (arg) {
    return typeof arg === "object" && arg !== null;
  },
  plainObject: function (arg) {
    return toString(arg) === "[object Object]";
  },
  array: function (arg) {
    return Array.isArray(arg);
  },
  error: function (arg) {
    return is.object(arg) && (toString(arg) === "[object Error]" || arg instanceof Error);
  },
  promise: function (arg) {
    return arg && is["function"](arg.then);
  },
  stream: function (arg) {
    return arg && is["function"](arg.pipe);
  },
  vinylFile: function (arg) {
    return is.plainObject(arg) && arg.constructor.name === "File";
  } };
exports.__esModule = true;