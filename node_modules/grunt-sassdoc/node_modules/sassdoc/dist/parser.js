"use strict";

var _to5Helpers = require("6to5-runtime/helpers");

var _core = require("6to5-runtime/core-js");

var defer = require("./utils").defer;
var errors = _to5Helpers.interopRequireWildcard(require("./errors"));

var AnnotationsApi = _to5Helpers.interopRequire(require("./annotation"));

var sorter = _to5Helpers.interopRequire(require("./sorter"));

var ScssCommentParser = require("scss-comment-parser");
var through = require("through2");
var concat = require("concat-stream");
var path = require("path");

var Parser = (function () {
  function Parser(env, additionalAnnotations) {
    _to5Helpers.classCallCheck(this, Parser);

    this.annotations = new AnnotationsApi(env);
    this.annotations.addAnnotations(additionalAnnotations);
    this.scssParser = new ScssCommentParser(this.annotations.list, env);

    this.scssParser.commentParser.on("warning", function (warning) {
      env.emit("warning", new errors.Warning(warning.message));
    });
  }

  Parser.prototype.parse = function parse(code, id) {
    return this.scssParser.parse(code, id);
  };

  /**
   * Invoke the `resolve` function of an annotation if present.
   * Called with all found annotations except with type "unkown".
   */
  Parser.prototype.postProcess = function postProcess(data) {
    var _this = this;
    data = sorter(data);

    _core.Object.keys(this.annotations.list).forEach(function (key) {
      var annotation = _this.annotations.list[key];

      if (annotation.resolve) {
        annotation.resolve(data);
      }
    });

    return data;
  };

  /**
   * Return a transform stream meant to be piped in a stream of SCSS
   * files. Each file will be passed-through as-is, but they are all
   * parsed to generate a SassDoc data array.
   *
   * The returned stream has an additional `promise` property, containing
   * a `Promise` object that will be resolved when the stream is done and
   * the data is fulfiled.
   *
   * @param {Object} parser
   * @return {Object}
   */
  Parser.prototype.stream = function stream() {
    var _this = this;
    var deferred = defer();
    var data = [];

    var transform = function (file, enc, cb) {
      // Pass-through.
      cb(null, file);

      var parseFile = function (_ref) {
        var buf = _ref.buf;
        var name = _ref.name;
        var path = _ref.path;
        var fileData = _this.parse(buf.toString(enc), name);

        fileData.forEach(function (item) {
          item.file = {
            path: path,
            name: name };

          data.push(item);
        });
      };

      if (file.isBuffer()) {
        var args = {
          buf: file.contents,
          name: path.basename(file.relative),
          path: file.relative };

        parseFile(args);
      }

      if (file.isStream()) {
        file.pipe(concat(function (buf) {
          parseFile({ buf: buf });
        }));
      }
    };

    var flush = function (cb) {
      data = data.filter(function (item) {
        return item.context.type !== "unknown";
      });
      data = _this.postProcess(data);

      deferred.resolve(data);
      cb();
    };

    var filter = through.obj(transform, flush);
    filter.promise = deferred.promise;

    return filter;
  };

  return Parser;
})();

module.exports = Parser;