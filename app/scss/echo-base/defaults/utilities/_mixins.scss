//==============================================================================
//
//  echo-base/defaults/utilities/_mixins.scss
//
//  ----------------------------------------------------------------------------
//  Table of contents
//  ----------------------------------------------------------------------------
//  a. Breakpoints
//      1. breakpoint
//      2. breakpoint-range
//
//
//  @copyright 2015, Loft Digital, www.weareloft.com
//
//==============================================================================




//==============================================================================
//  a. Breakpoints
//==============================================================================

//  1. breakpoint
//==============================================================================

/// Used to insert a single named breakpoint into your css. Breakpoints you've
/// registered in the custom breakpoints map as well as default breakpoints are
/// available. The mixin will automatically use min or max-width depending on
/// whethere the mobile-first flag is set to true or false.

/// @access public
/// @param {String} $key - A named breakpoint to retrieve from the breakpoint map
/// @group Breakpoints
///
/// @example scss - Usage
/// .block {
///   @include breakpoint(large){
///     font-size: 2rem;
///   }
/// }
/// @example css - Output
/// //if $mobile-first is false
/// .block {
///   @media (max-width: 960px){
///      font-size: 2rem;
///   }
/// }
///
/// //if $mobile-first is true
/// .block {
///   @media (min-width: 960px){
///      font-size: 2rem;
///   }
/// }

@mixin breakpoint($key) {

    @if ($mobile-first == true) {
        $flow: min-width;
    } @else {
        $flow: max-width;
    }

    @media (#{$flow}: breakpoint($key)) {
        @content;
    }
}



//  2. breakpoint-range
//==============================================================================

/// Used to insert a breakpoint range into your css. Breakpoints you've
/// registered in the custom breakpoints map as well as default breakpoints are
/// available, you can also specify your own values as px/rem/em sizes if you prefer.
/// The order at which you pass your values doesn't matter as the mixin will sort them
/// and print them out in the correct order, it also takes into account whether you are
/// using mobile first or not.

/// @access public
/// @param {Mixed} $primary - A named breakpoint or value
/// @param {Mixed} $secondary - A named breakpoint or value
/// @group Breakpoints
///
/// @example scss - Usage with named breakpoints
/// .block {
///   @include breakpoint-range(large, small){
///     font-size: 2rem;
///   }
/// }
/// @example css - Output with named breakpoints
/// //if $mobile-first is false
/// .block {
///   @media (max-width: 960px) and (min-width: 320px){
///      font-size: 2rem;
///   }
/// }
///
/// //if $mobile-first is true
/// .block {
///   @media (min-width: 320px) and (max-width: 960px){
///      font-size: 2rem;
///   }
/// }
///
///
/// @example scss - Usage with bespoke values
/// .block {
///   @include breakpoint-range(30px, 80px){
///     font-size: 2rem;
///   }
/// }
/// @example css - Output with bespoke values
/// //if $mobile-first is false
/// .block {
///   @media (max-width: 80px) and (min-width: 30px){
///      font-size: 2rem;
///   }
/// }
///
/// //if $mobile-first is true
/// .block {
///   @media (min-width: 30px) and (max-width: 80px){
///      font-size: 2rem;
///   }
/// }
///
///
/// @example scss - Usage with mixed values
/// .block {
///   @include breakpoint-range(30px, large){
///     font-size: 2rem;
///   }
/// }
/// @example css - Output with mixed values
/// //if $mobile-first is false
/// .block {
///   @media (max-width: 960px) and (min-width: 30px){
///      font-size: 2rem;
///   }
/// }
///
/// //if $mobile-first is true
/// .block {
///   @media (min-width: 30px) and (max-width: 960px){
///      font-size: 2rem;
///   }
/// }

@mixin breakpoint-range($primary, $secondary) {

    @if type-of($primary) != number {
        @if breakpoint($primary) != false {
            $primary: breakpoint($primary);
        }
    }

    @if type-of($secondary) != number {
        @if breakpoint($secondary) != false {
            $secondary: breakpoint($secondary);
        }
    }

    @if $primary >= $secondary {
        $vals: ($primary, $secondary);
    } @else {
        $vals: ($secondary, $primary);
    }

    @if $mobile-first == true {
        @media (min-width: #{nth($vals, 2)}) and (max-width: #{nth($vals, 1)}) {
            @content;
        }
    } @else {
        @media (max-width: #{nth($vals, 1)}) and (min-width: #{nth($vals, 2)}) {
            @content;
        }
    }
}
