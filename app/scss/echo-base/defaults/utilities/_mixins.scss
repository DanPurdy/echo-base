//==============================================================================
//
//  echo-base/defaults/utilities/_mixins.scss
//
//  ----------------------------------------------------------------------------
//  Table of contents
//  ----------------------------------------------------------------------------
//  a. Breakpoints
//
//
//  @copyright 2015, Loft Digital, www.weareloft.com
//
//==============================================================================
//
// @mixin test() {
//     $test: order-breakpoints('desc');
//
//     @warn #{$test};
// }



// @mixin debug-map($map) {
//     @at-root {
//         @debug-map {
//             __toString__: inspect($map);
//             __length__: length($map);
//             __depth__: depth($map);
//             __keys__: map-keys($map);
//             __properties__ {
//                 @each $key, $value in $map {
//                     #{'(' + type-of($value) + ') ' + $key}: inspect($value);
//                 }
//             }
//         }
//     }
// }




//==============================================================================
//  Breakpoint
//==============================================================================

@mixin breakpoint($key, $flag:max) {

    @if ($flag == 'min') {
        $flow: min-width;
    } @else {
        $flow: max-width;
    }

    @media (#{$flow}: breakpoint($key)) {
        @content;
    }
}



@mixin text-size($text-size, $breakpoint-name: 'small') {
    $text-size-properties: text-properties-for($text-size, $breakpoint-name);

    @if $text-size-properties != false {

        // runs through each key, value map to include all values you may have specified for a certain size.

        @each $key, $value in $text-size-properties {
            #{$key}: #{$value}
        }

    } @else {

        // the breakpoint has no defined properties which to parse
        @warn "Breakpoint '#{$breakpoint-name}' for text size '#{$text-size}' is not defined";
    }
}

@mixin responsive-text-size($text-size) {

    $default: 'default';

    @include text-size($text-size, $default);

    $text-breakpoints-map: text-breakpoints-for($text-size);
    $text-breakpoints-keys: order-breakpoints();
    // $text-breakpoints-keys: map-keys($text-breakpoints-map);



    @each $breakpoint-name in $text-breakpoints-keys {

        @if $breakpoint-name != $default {

            @if breakpoint($breakpoint-name) != false {

                //need to check if breakpoint exists here.
                @include breakpoint($breakpoint-name) {
                    @include text-size($text-size, $breakpoint-name);
                }
            } @else {

                @warn "Text size '#{$breakpoint-name}' for the selector '#{$text-size}' was skipped as breakpoint: '#{$breakpoint-name}' doesn't exist "
            }
        }
    }
}
