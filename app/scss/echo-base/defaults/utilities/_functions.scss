//==============================================================================
//
//  echo-base/defaults/utilities/_functions.scss
//
//  ----------------------------------------------------------------------------
//  Table of contents
//  ----------------------------------------------------------------------------
//  a. Breakpoints
//      1. Setup breakpoints
//      2. Get breakpoint
//  b. Palette
//      1. Setup palettes
//      2. Get palette
//  c. Typography
//      1. Merge responsive text maps
//      2. Get responsive text properties
//      3. Get breakpoint for responsive text
//  d. Helpers
//      1. Strip Unit
//      2. Remify
//      3. Rem Calc
//
//
//  @copyright 2015, Loft Digital, www.weareloft.com
//
//==============================================================================




//==============================================================================
//  a. Breakpoints
//==============================================================================

//  1. Setup breakpoints
//==============================================================================

$breakpoints: ();

@function setup-breakpoints() {
    @if (length($custom-breakpoints) > 0) {
        @return map-merge($default-breakpoints, $custom-breakpoints);
    } @else {
        @return $default-breakpoints;
    }
}



//  2. Get breakpoint
//==============================================================================

@function breakpoint($key) {

    @if length($breakpoints) == 0 {
        $breakpoints: setup-breakpoints();

    }

    @if (map-has-key($breakpoints, $key)) {
        @return map-get($breakpoints, $key);
    } @else {
        @warn "Breakpoint '#{$key}' doesn't exist!";
        @return false;
    }
}



//  3. Order Breakpoints by size
//==============================================================================

@function order-breakpoints() {
    $breakpoint-map: setup-breakpoints();
    $map-list: ();

    @for $i from 1 through length($breakpoint-map) {
        $current-highest: 0;
        $current-value: '';

        @each $key, $value in $breakpoint-map {
            @if index($map-list, $key) == null {
                $value: strip-unit($value);

                @if($value > $current-highest) {
                    $current-highest: $value;
                    $current-value: $key;
                }
            }
        }

        $map-list: append($map-list, $current-value);

    }

    @return $map-list;
}




//==============================================================================
//  b. Palettes
//==============================================================================

//  1. Setup palettes
//==============================================================================

@function setup-palettes() {

    $palettes:();

    // Include if custom palettes are in use
    @if (length($custom-palettes) > 0) {
        $palettes: map-merge($default-palettes, $custom-palettes);
    } @else {
        $palettes: $default-palettes;
    }

    // Include third-party palette if enabled
    @if ($use-third-party-palette) {
        $palettes: map-merge($palettes, $third-party-palettes);
    }

    @return $palettes;
}



//  2. Get palette
//==============================================================================

@function palette($palette, $tone: 'base') {

    $palettes: setup-palettes();

    @if (map-has-key($palettes, $palette)) {

        $color: map-get($palettes, $palette);

        @if (map-has-key($color, $tone)) {
            @return map-get($color, $tone);
        } @else {
            @warn "Tone '#{$tone}' doesn't exist for palette '#{$color}'!";
        }

    } @else {
        @warn "Palette '#{$palette}' doesn't exist!";
    }
}

@function depth($map) {
    $level: 1;

    @each $key, $value in $map {
        @if type-of($value) == 'map' {
            $level: max(depth($value) + 1, $level);
        }
    }

    @return $level;
}



//==============================================================================
//  c. Typography
//==============================================================================

//  1. Merge responsive text maps
//==============================================================================

$responsive-text-map: ();

@function setup-responsive-text($text-size) {

    @if length($responsive-text-custom) > 0 {

        @if map-has-key($responsive-text-map, $text-size) {

            @return $responsive-text-map;

        } @else {

            @each $key, $value in $responsive-text-defaults {

                @if map-has-key($responsive-text-custom, $key) {

                    //assign the defaults map value of the same name to a new map with the key test
                    // if we were to merge two maps with the same key they would overwrite, this way we can be sure that the map will merge
                    $existing-map: (test: map-get($responsive-text-defaults, $key));

                    $new-map: ($key: map-merge(map-get($existing-map, test), map-get($responsive-text-custom, $key)));

                    $responsive-text-map: map-merge($responsive-text-map, $new-map);

                }@else {

                    $new-map: ($key: $value);

                    $responsive-text-map: map-merge($responsive-text-map, $new-map);

                }
            }

        }

        @return $responsive-text-map;


    } @else {

        @return $responsive-text-defaults;

    }

}



//  2. Get responsive text properties
//==============================================================================

// http://maketea.co.uk/2014/11/05/managing-responsive-typography-with-sass.html

@function text-breakpoints-for($text-size) {

    $responsive-text: setup-responsive-text($text-size);

    @if map-has-key($responsive-text, $text-size) {
        @return map-get($responsive-text, $text-size);
    } @else {
        @warn "Text size map '#{$text-size}' doesn't exist";
    }
}




//  3. Get breakpoint for responsive text
//==============================================================================

@function text-properties-for($text-size, $breakpoint-name) {

    $text-breakpoints-map: text-breakpoints-for($text-size);

    @if map-has-key($text-breakpoints-map, $breakpoint-name) {
        @return map-get($text-breakpoints-map, $breakpoint-name);
    } @else {
        @return false;
    }
}




//==============================================================================
//  d. Helpers
//==============================================================================

//  1. Strip Unit
//==============================================================================

@function strip-unit($val) {
    @return $val / ($val * 0 + 1);
}



//  2. Remify
//==============================================================================

@function remify($value, $rem-base) {

    $value: strip-unit($value);

    @if $value == 0 {

        @return 0;

    } @else {

        @return $value / strip-unit($rem-base) * 1rem;

    }


}



//  3. Rem Calc
//==============================================================================

@function rem-calc($values, $rem-base: $base-font-size) {

    $num-vals : length($values);

    @if $num-vals <= 0 {

        @warn 'You need to supply at least one value to calcRem';

    } @else if $num-vals == 1 {

        $val: nth($values, 1);

        @return remify($val, $rem-base);


    } @else if $num-vals > 4 {

        @warn "You\'ve supplied too many values to calcRem";

    } @else {

        $rem-values: ();

        @for $i from 1 through $num-vals {
            $rem-values: append($rem-values, remify(nth($values, $i), $rem-base));
        }

        @return $rem-values;

    }
}
