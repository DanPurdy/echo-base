//==============================================================================
//
//  spec/scss/utilities/_palettes.scss
//
//  ----------------------------------------------------------------------------
//  Table of contents
//  ----------------------------------------------------------------------------
//  a. Custom test dependencies
//  b. Function/mixin dependencies
//  c. Build tests
//  d. Run tests
//
//
//  @copyright 2015, Loft Digital, www.weareloft.com
//
//==============================================================================


//==============================================================================
//  Custom test dependencies
//==============================================================================

$custom-palette-base: rgb(255, 0, 0);


$custom-string-color: rgb(255, 0, 0);
$custom-palette-color: rgb(0, 255, 0);

$custom-sub-group-string-color: rgb(255, 255, 0);
$custom-sub-group-palette-color: rgb(0, 0, 255);



$custom-palettes: (

    custom-palette: (
        base: $custom-palette-base
    ),




    // Setup custom string color
    custom-string-color: $custom-string-color,

    // Setup custom palette color
    custom-palette-color: (
        base: $custom-palette-color
    ),

    // Setup custom sub group
    custom-sub-group: (

        // Setup custom sub group string color
        custom-sub-group-string-color: $custom-sub-group-string-color,

        // Setup custom sub group palette color
        custom-sub-group-palette-color: (
            base: $custom-sub-group-palette-color
        )
    )
);






//==============================================================================
//  Function/mixin dependencies
//==============================================================================

@import "../../../scss/echo-base/defaults/palettes";




//==============================================================================
//  Build tests
//==============================================================================

//  Setup palettes - setup-palettes()
//==============================================================================

/// Test if setup-palettes() returns an object of type map
///
/// @group Tests

@mixin palettes-return-map() {

    @include test('setup-palettes') {
        // Values to compare
        $test: type-of(setup-palettes());
        $expect: map;

        @include assert-equal($test, $expect, 'Returns a map');
    }

}



/// Test if setup-palettes() successfully merges the default and custom
/// palette maps by checking for the existance of a custom key
///
/// @group Tests

@mixin palettes-has-custom-key() {

    @include test('setup-palettes') {
        // Setup
        $palettes: setup-palettes();

        // Values to compare
        $test: map-has-key($palettes, custom-palette);
        $expect: true;

        @include assert-equal($test, $expect, 'Returns a merged map of default & custom palettes');
    }

}



/// Test if setup-palettes() successfully merges the default and custom
/// palette maps by checking the value of a custom key
///
/// @group Tests

@mixin palettes-return-custom-value() {

    @include test('setup-palettes') {
        // Setup
        $palettes: setup-palettes();
        $custom-color: map-get($palettes, custom-palette);

        // Values to compare
        $test: map-get($custom-color, base);
        $expect: $custom-palette-base;

        @include assert-equal($test, $expect, 'Returns a custom palette value');
    }

}



//  Palette - palette()
//==============================================================================


/// Test if palette() returns the primary color correctly
///
/// @group Tests

@mixin palette-get-string-color() {

    @include test('palette()') {

        $palettes: setup-palettes();

        // Values to compare
        $test: palette-take-two(custom-string-color);
        $expect: $custom-string-color;

        @include assert-equal($test, $expect, 'Returns a color using a string');
    }
}




/// Test if palette() returns the primary color correctly
///
/// @group Tests

@mixin palette-get-palette-color() {

    @include test('palette()') {

        $palettes: setup-palettes();

        // Values to compare
        $test: palette-take-two(custom-palette-color);
        $expect: $custom-palette-color;

        @include assert-equal($test, $expect, 'Returns a color using a palette and default tone (none specified)');
    }
}




/// Test if palette() with 2 args returns the base tone
///
/// @group Tests

@mixin palette-get-sub-group-string-color() {

    @include test('palette()') {

        $palettes: setup-palettes();

        @debug $palettes;

        // Values to compare
        $test: palette-take-two(custom-sub-group, custom-sub-group-string-color);
        $expect: $custom-sub-group-string-color;

        @include assert-equal($test, $expect, 'Returns a color using a string within a sub group');
    }
}


/// Test if palette() with 2 args returns the base tone
///
/// @group Tests

@mixin palette-get-sub-group-palette-color() {

    @include test('palette()') {

        $palettes: setup-palettes();

        // Values to compare
        $test: palette-take-two(custom-sub-group, custom-sub-group-palette-color, base);
        $expect: $custom-sub-group-palette-color;

        @include assert-equal($test, $expect, 'Returns a color using a palette within a sub group');
    }
}





//==============================================================================
//  Run tests
//==============================================================================

//  Setup palettes - setup-palettes()
//==============================================================================

@include test-module('Setup palettes') {

    @include palettes-return-map();
    @include palettes-has-custom-key();
    @include palettes-return-custom-value();
}

//  Palette - palettes()
//==============================================================================

@include test-module('palette()') {

    @include palette-get-string-color();
    @include palette-get-palette-color();
    @include palette-get-sub-group-string-color();
    @include palette-get-sub-group-palette-color();

}
