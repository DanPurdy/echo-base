//==============================================================================
//
//  spec/scss/utilities/_helpers.scss
//
//  ----------------------------------------------------------------------------
//  Table of contents
//  ----------------------------------------------------------------------------
//  a. Custom test dependencies
//  b. Function/mixin dependencies
//  c. Build tests
//  d. Run tests
//
//
//  @copyright 2015, Loft Digital, www.weareloft.com
//
//==============================================================================


//==============================================================================
//  Custom test dependencies
//==============================================================================

$base-font-size: 16px;



//==============================================================================
//  Function/mixin dependencies
//==============================================================================




//==============================================================================
//  Build tests
//==============================================================================

//  REM calculator - rem-calc()
//==============================================================================

/// Test if rem-calc() returns an object of type map
///
/// @group Tests

@mixin rem-calc-returns-correct-value() {

    @include test('rem-calc') {

        // Values to compare
        $test: rem-calc(16px);
        $expect: 1rem;

        @include assert-equal($test, $expect, 'Returns a correct value');
    }
}



/// Test if rem-calc() returns a correct value half of base font size
///
/// @group Tests

@mixin rem-calc-returns-correct-value-half() {

    @include test('rem-calc') {

        // Values to compare
        $test: rem-calc(8px);
        $expect: 0.5rem;

        @include assert-equal($test, $expect, 'Returns a correct value');
    }

}



/// Test if rem-calc() returns a correct value one and a half times that of base font size
///
/// @group Tests

@mixin rem-calc-returns-correct-value-one-and-a-half() {

    @include test('rem-calc') {

        // Values to compare
        $test: rem-calc(24px);
        $expect: 1.5rem;

        @include assert-equal($test, $expect, 'Returns a correct value');
    }

}




//  Strip Unit - strip-unit()
//==============================================================================

@mixin strip-unit-returns-number() {

    @include test('strip-unit') {

        // Values to compare
        $test: type-of(strip-unit(24));
        $expect: number;

        @include assert-equal($test, $expect, 'strip unit returns a number');
    }

}

@mixin strip-unit-returns-number-without-unit() {

    @include test('strip-unit') {

        // Values to compare
        $test: strip-unit(24px);
        $expect: 24;

        @include assert-equal($test, $expect, 'strip unit returns a number with unit stripped');
    }
}




//  Remify - remify()
//==============================================================================

@mixin remify-returns-number() {

    @include test('remify') {

        // Values to compare
        $test: type-of(remify(1, $base-font-size));
        $expect: number;

        @include assert-equal($test, $expect, 'remify returns a number');
    }

}

@mixin remify-returns-rem-unit() {

    @include test('remify') {

        // Values to compare
        $test: remify(16, $base-font-size);
        $expect: 1rem;

        @include assert-equal($test, $expect, 'remify returns a rem unit');
    }
}



@mixin remify-returns-zero-value() {

    @include test('remify') {

        // Values to compare
        $test: remify(0, $base-font-size);
        $expect: 0;

        @include assert-equal($test, $expect, 'remify returns 0 for 0 values');
    }
}




//==============================================================================
//  Run tests
//==============================================================================

//  REM Calculator - rem-calc()
//==============================================================================

@include test-module('rem-calc') {

    @include rem-calc-returns-correct-value();
    @include rem-calc-returns-correct-value-half();
    @include rem-calc-returns-correct-value-one-and-a-half();

}



// Strip-unit - strip-unit()
//==============================================================================

@include test-module('strip-unit') {

    @include strip-unit-returns-number();
    @include strip-unit-returns-number-without-unit();

}



//  Remify - remify()
//==============================================================================

@include test-module('remify') {

    @include remify-returns-number();
    @include remify-returns-rem-unit();
    @include remify-returns-zero-value();

}
