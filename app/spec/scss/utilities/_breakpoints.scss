//==============================================================================
//
//  spec/scss/utilities/_breakpoints.scss
//
//  ----------------------------------------------------------------------------
//  Table of contents
//  ----------------------------------------------------------------------------
//  a. Custom test dependencies
//  b. Function/mixin dependencies
//  c. Build tests
//  d. Run tests
//
//
//  @copyright 2015, Loft Digital, www.weareloft.com
//
//==============================================================================


//==============================================================================
//  Custom test dependencies
//==============================================================================

$custom-breakpoint-key: custom-breakpoint;
$custom-breakpoint-value: 200px;

$custom-breakpoint-key-small: custom-breakpoint-small;
$custom-breakpoint-key-large: custom-breakpoint-large;

$custom-breakpoint-small: 1px;
$custom-breakpoint-large: 10000000px;

$custom-breakpoints: (
    $custom-breakpoint-key: $custom-breakpoint-value,
    $custom-breakpoint-key-small: $custom-breakpoint-small,
    $custom-breakpoint-key-large: $custom-breakpoint-large
);




//==============================================================================
//  Function/mixin dependencies
//==============================================================================

@import "../../../scss/echo-base/defaults/breakpoints";



//==============================================================================
//  Tests
//==============================================================================

@include test-module('Setup breakpoints') {



//  setup-palette() [function]
//==============================================================================

    @include test('setup-breakpoints() [function]') {

        /// Test if setup-breakpoints() returns an object of type map
        ///
        /// @group Tests

        $test: type-of(setup-breakpoints());
        $expect: map;

        @include assert-equal($test, $expect, 'Returns a map');



        /// Test if setup-breakpoints() successfully merges the default and custom
        /// palette maps by checking for the existance of a custom key
        ///
        /// @group Tests

        $breakpoints-map: setup-breakpoints();

        $test: map-has-key($breakpoints-map, custom-breakpoint);

        @include assert-true($test, 'Returns a merged map of default & custom breakpoints');



        /// Test if setup-breakpoints() successfully merges the default and custom
        /// palette maps by checking the value of a custom key
        ///
        /// @group Tests

        $breakpoints-map: setup-breakpoints();

        $test: map-get($breakpoints-map, $custom-breakpoint-key);
        $expect: $custom-breakpoint-value;

        @include assert-equal($test, $expect, 'Returns a custom breakpoint value');



        /// Test if setup-breakpoints() returns a list compromised of both default and
        /// custom map keys
        ///
        /// @group Tests

        $breakpoints-map: setup-breakpoints();

        $test: map-keys($breakpoints-map);
        $expect: large, medium, small, x-small, custom-breakpoint, custom-breakpoint-small, custom-breakpoint-large;

        @include assert-equal($test, $expect, 'Returns a list of the default and custom breakpoints');
    }



// Get Breakpoints - breakpoint()
//==============================================================================

    @include test('breakpoint() [function]') {

        /// Test if breakpoint() will return the correct breakpoint value
        ///
        /// @group Tests

        $breakpoint: $custom-breakpoint-key;

        $test: breakpoint($breakpoint);
        $expect: $custom-breakpoint-value;

        @include assert-equal($test, $expect, 'Return a breakpoint value from the breakpoint map');



        /// Test if breakpoint() will return false if a breakpoint that doesn't exist
        /// is specified.
        ///
        /// @group Tests

        $breakpoint: 'non-existant-breakpoint';

        $test: breakpoint($breakpoint);

        @include assert-false($test, 'Returns false when encountering a non existant variable');
    }



// setup-key-list()
//==============================================================================

    @include test('setup-key-list() [function]') {




        //======================================================================
        // Non-mobile first
        //======================================================================



        /// test if setup-key-list returns a string
        ///
        /// @group Tests

        $mobile-first: false;

        $test: type-of(setup-key-list());
        $expect: string;

        @include assert-equal($test, $expect, 'setup-key-list() returns a string');



        /// test if setup-key-list returns the expected string with a named
        /// value
        ///
        /// @group Tests

        $mobile-first: false;
        $val: (large);

        $test: setup-key-list($val);
        $expect: '(max-width: 960px)';

        @include assert-equal($test, $expect, 'setup-key-list() returns correctly for named value');



        /// test if setup-key-list returns the expected string with a custom
        /// value
        ///
        /// @group Tests

        $mobile-first: false;
        $val: (900px);

        $test: setup-key-list($val);
        $expect: '(max-width: 900px)';

        @include assert-equal($test, $expect, 'setup-key-list() returns correctly for custom value');



        /// test if setup-key-list returns the expected string with a named
        /// value range and ordered desktop first
        ///
        /// @group Tests

        $mobile-first: false;
        $val: (small, large);

        $test: setup-key-list($val);
        $expect: '(max-width: 960px) and (min-width: 480px)';

        @include assert-equal($test, $expect, 'setup-key-list()  returns correctly and ordered for named value range');



        /// test if setup-key-list returns the expected string with a custom
        /// value range and ordered desktop first
        ///
        /// @group Tests

        $mobile-first: false;
        $val: (100px, 900px);

        $test: setup-key-list($val);
        $expect: '(max-width: 900px) and (min-width: 100px)';

        @include assert-equal($test, $expect, 'setup-key-list() returns correctly and ordered for custom value range');




        //======================================================================
        // Mobile first
        //======================================================================



        /// test if setup-key-list returns the expected string with a named
        /// value mobile first
        ///
        /// @group Tests

        $mobile-first: true;
        $val: (large);

        $test: setup-key-list($val);
        $expect: '(min-width: 960px)';

        @include assert-equal($test, $expect, 'setup-key-list() returns correctly for named value - mobile first');



        /// test if setup-key-list returns the expected string with a custom
        /// value mobile first
        ///
        /// @group Tests

        $mobile-first: true;
        $val: (900px);

        $test: setup-key-list($val);
        $expect: '(min-width: 900px)';

        @include assert-equal($test, $expect, 'setup-key-list() returns correctly for custom value - mobile first');



        /// test if setup-key-list returns the expected string with a named
        /// value range and ordered mobile first
        ///
        /// @group Tests

        $mobile-first: true;
        $val: (small, large);

        $test: setup-key-list($val);
        $expect: '(min-width: 480px) and (max-width: 960px)';

        @include assert-equal($test, $expect, 'setup-key-list()  returns correctly and ordered for named value range - mobile first');



        /// test if setup-key-list returns the expected string with a custom
        /// value range and ordered mobile first
        ///
        /// @group Tests

        $mobile-first: true;
        $val: (100px, 900px);

        $test: setup-key-list($val);
        $expect: '(min-width: 100px) and (max-width: 900px)';

        @include assert-equal($test, $expect, 'setup-key-list() returns correctly and ordered for custom value range - mobile first');
    }



// setup-config-list()
//==============================================================================

    @include test('setup-config-list() - [function]') {



        /// test if setup-config-list returns a string
        ///
        /// @group Tests

        $test: type-of(setup-config-list());
        $expect: string;

        @include assert-equal($test, $expect, 'setup-config-list() returns a string');



        /// test if setup-config-list returns the correctly formatted string
        ///
        /// @group Tests

        $val: ('orientation: landscape');

        $test: setup-config-list($val);
        $expect: '(orientation: landscape)';

        @include assert-equal($test, $expect, 'setup-config-list() returns a correct media string with a single value');



        /// test if setup-config-list returns the correctly formatted string
        /// with mutliple values
        ///
        /// @group Tests

        $val: ('orientation: landscape', 'resolution: 192dppx');

        $test: setup-config-list($val);
        $expect: '(orientation: landscape) and (resolution: 192dppx)';

        @include assert-equal($test, $expect, 'setup-config-list() returns a correct media string with multiple values');
    }



// breakpoint-range()
//==============================================================================

    @include test('breakpoint-range() - [function]') {

        /// test if breakpoint-range() returns a string
        ///
        /// @group Tests

        $test: type-of(breakpoint-range(large, small));
        $expect: string;

        @include assert-equal($test, $expect, 'breakpoint-range() returns a string');




        //======================================================================
        // Non-mobile first
        //======================================================================



        /// test if breakpoint-range() returns a correctly formatted string
        /// desktop first with named values
        ///
        /// @group Tests

        $mobile-first: false;

        $test: breakpoint-range(large, small);
        $expect: '(max-width: 960px) and (min-width: 480px)';

        @include assert-equal($test, $expect, 'breakpoint-range() returns correctly formatted string with named values - desktop first');



        /// test if breakpoint-range() returns a correctly formatted string
        /// desktop first with named values and corrected order
        ///
        /// @group Tests

        $mobile-first: false;

        $test: breakpoint-range(small, large);
        $expect: '(max-width: 960px) and (min-width: 480px)';

        @include assert-equal($test, $expect, 'breakpoint-range() returns correctly formatted string with named values & corrected order - desktop first');



        /// test if breakpoint-range() returns a correctly formatted string
        /// desktop first with mixed values
        ///
        /// @group Tests

        $mobile-first: false;

        $test: breakpoint-range(960px, small);
        $expect: '(max-width: 960px) and (min-width: 480px)';

        @include assert-equal($test, $expect, 'breakpoint-range() returns correctly formatted string with mixed values - desktop first');



        /// test if breakpoint-range() returns a correctly formatted string
        /// desktop first with mixed values and corrected order
        ///
        /// @group Tests

        $mobile-first: false;

        $test: breakpoint-range(small, 960px);
        $expect: '(max-width: 960px) and (min-width: 480px)';

        @include assert-equal($test, $expect, 'breakpoint-range() returns correctly formatted string with mixed values & corrected order - desktop first');




        //======================================================================
        // Mobile first
        //======================================================================



        /// test if breakpoint-range() returns a correctly formatted string
        /// mobile first with named values
        ///
        /// @group Tests

        $mobile-first: true;

        $test: breakpoint-range(small, large);
        $expect: '(min-width: 480px) and (max-width: 960px)';

        @include assert-equal($test, $expect, 'breakpoint-range() returns correctly formatted string with named values - mobile first');



        /// test if breakpoint-range() returns a correctly formatted string
        /// mobile first with named values and corrected order
        ///
        /// @group Tests

        $mobile-first: true;

        $test: breakpoint-range(large, small);
        $expect: '(min-width: 480px) and (max-width: 960px)';

        @include assert-equal($test, $expect, 'breakpoint-range() returns correctly formatted string with named values & corrected order - mobile first');



        /// test if breakpoint-range() returns a correctly formatted string
        /// mobile first with mixed values
        ///
        /// @group Tests

        $mobile-first: true;

        $test: breakpoint-range(small, 960px);
        $expect: '(min-width: 480px) and (max-width: 960px)';

        @include assert-equal($test, $expect, 'breakpoint-range() returns correctly formatted string with mixed values - mobile first');



        /// test if breakpoint-range() returns a correctly formatted string
        /// mobile first with mixed values and corrected order
        ///
        /// @group Tests

        $mobile-first: true;

        $test: breakpoint-range(960px, small);
        $expect: '(min-width: 480px) and (max-width: 960px)';

        @include assert-equal($test, $expect, 'breakpoint-range() returns correctly formatted string with mixed values & corrected order - mobile first');
    }
}
