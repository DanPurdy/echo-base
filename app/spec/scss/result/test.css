/* # Palettes ---------- */
/* setup-palettes() [function] */
[data-module="Palettes"] [data-test="setup-palettes() [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns an object of type map'; }
[data-module="Palettes"] [data-test="setup-palettes() [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns a map containing the custom palettes'; }

/* palette() [function] */
[data-module="Palettes"] [data-test="palette() [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns the expected color stored within a single key-value pair from the global $palettes map'; }
[data-module="Palettes"] [data-test="palette() [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns the expected base tone color stored within a palette, from the global $palettes map'; }
[data-module="Palettes"] [data-test="palette() [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns the expected color tone stored within a palette, from the global $palettes map'; }
[data-module="Palettes"] [data-test="palette() [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns the expected color stored with a single key-value pair, itself stored within a sub group, from the global $palettes map'; }
[data-module="Palettes"] [data-test="palette() [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns the expected color stored within a palette, itself stored within a sub-group, from the global $palettes map'; }
[data-module="Palettes"] [data-test="palette() [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns the expected color tone stored within a palette, itself stored within a sub-group, from the global $palettes map'; }

/* # SUMMARY ---------- */
/* 2 Tests: */
/*  - 2 Passed */
/*  - 0 Failed */
/* -------------------- */