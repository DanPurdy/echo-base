/* # Setup breakpoints ---------- */
/* setup-breakpoints() [function] */
[data-module="Setup breakpoints"] [data-test="setup-breakpoints() [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns a map'; }
[data-module="Setup breakpoints"] [data-test="setup-breakpoints() [function]"] .assert-true {
  -result: PASS;
  -description: 'Returns a merged map of default & custom breakpoints'; }
[data-module="Setup breakpoints"] [data-test="setup-breakpoints() [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns a custom breakpoint value'; }
[data-module="Setup breakpoints"] [data-test="setup-breakpoints() [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns a list of the default and custom breakpoints'; }

/* breakpoint() [function] */
[data-module="Setup breakpoints"] [data-test="breakpoint() [function]"] .assert-equal {
  -result: PASS;
  -description: 'Return a breakpoint value from the breakpoint map'; }
[data-module="Setup breakpoints"] [data-test="breakpoint() [function]"] .assert-false {
  -result: PASS;
  -description: 'Returns false when encountering a non existant variable'; }

/* setup-key-list() [function] */
[data-module="Setup breakpoints"] [data-test="setup-key-list() [function]"] .assert-equal {
  -result: PASS;
  -description: 'setup-key-list() returns a string'; }
[data-module="Setup breakpoints"] [data-test="setup-key-list() [function]"] .assert-equal {
  -result: PASS;
  -description: 'setup-key-list() returns correctly for named value'; }
[data-module="Setup breakpoints"] [data-test="setup-key-list() [function]"] .assert-equal {
  -result: PASS;
  -description: 'setup-key-list() returns correctly for custom value'; }
[data-module="Setup breakpoints"] [data-test="setup-key-list() [function]"] .assert-equal {
  -result: PASS;
  -description: 'setup-key-list()  returns correctly and ordered for named value range'; }
[data-module="Setup breakpoints"] [data-test="setup-key-list() [function]"] .assert-equal {
  -result: PASS;
  -description: 'setup-key-list() returns correctly and ordered for custom value range'; }
[data-module="Setup breakpoints"] [data-test="setup-key-list() [function]"] .assert-equal {
  -result: PASS;
  -description: 'setup-key-list() returns correctly for named value - mobile first'; }
[data-module="Setup breakpoints"] [data-test="setup-key-list() [function]"] .assert-equal {
  -result: PASS;
  -description: 'setup-key-list() returns correctly for custom value - mobile first'; }
[data-module="Setup breakpoints"] [data-test="setup-key-list() [function]"] .assert-equal {
  -result: PASS;
  -description: 'setup-key-list()  returns correctly and ordered for named value range - mobile first'; }
[data-module="Setup breakpoints"] [data-test="setup-key-list() [function]"] .assert-equal {
  -result: PASS;
  -description: 'setup-key-list() returns correctly and ordered for custom value range - mobile first'; }

/* setup-config-list() - [function] */
[data-module="Setup breakpoints"] [data-test="setup-config-list() - [function]"] .assert-equal {
  -result: PASS;
  -description: 'setup-config-list() returns a string'; }
[data-module="Setup breakpoints"] [data-test="setup-config-list() - [function]"] .assert-equal {
  -result: PASS;
  -description: 'setup-config-list() returns a correct media string with a single value'; }
[data-module="Setup breakpoints"] [data-test="setup-config-list() - [function]"] .assert-equal {
  -result: PASS;
  -description: 'setup-config-list() returns a correct media string with multiple values'; }

/* breakpoint-range() - [function] */
[data-module="Setup breakpoints"] [data-test="breakpoint-range() - [function]"] .assert-equal {
  -result: PASS;
  -description: 'breakpoint-range() returns a string'; }
[data-module="Setup breakpoints"] [data-test="breakpoint-range() - [function]"] .assert-equal {
  -result: PASS;
  -description: 'breakpoint-range() returns correctly formatted string with named values - desktop first'; }
[data-module="Setup breakpoints"] [data-test="breakpoint-range() - [function]"] .assert-equal {
  -result: PASS;
  -description: 'breakpoint-range() returns correctly formatted string with named values & corrected order - desktop first'; }
[data-module="Setup breakpoints"] [data-test="breakpoint-range() - [function]"] .assert-equal {
  -result: PASS;
  -description: 'breakpoint-range() returns correctly formatted string with mixed values - desktop first'; }
[data-module="Setup breakpoints"] [data-test="breakpoint-range() - [function]"] .assert-equal {
  -result: PASS;
  -description: 'breakpoint-range() returns correctly formatted string with mixed values & corrected order - desktop first'; }
[data-module="Setup breakpoints"] [data-test="breakpoint-range() - [function]"] .assert-equal {
  -result: PASS;
  -description: 'breakpoint-range() returns correctly formatted string with named values - mobile first'; }
[data-module="Setup breakpoints"] [data-test="breakpoint-range() - [function]"] .assert-equal {
  -result: PASS;
  -description: 'breakpoint-range() returns correctly formatted string with named values & corrected order - mobile first'; }
[data-module="Setup breakpoints"] [data-test="breakpoint-range() - [function]"] .assert-equal {
  -result: PASS;
  -description: 'breakpoint-range() returns correctly formatted string with mixed values - mobile first'; }
[data-module="Setup breakpoints"] [data-test="breakpoint-range() - [function]"] .assert-equal {
  -result: PASS;
  -description: 'breakpoint-range() returns correctly formatted string with mixed values & corrected order - mobile first'; }

/* # Setup palettes ---------- */
/* setup-palettes */
[data-module="Setup palettes"] [data-test="setup-palettes"] .assert-equal {
  -result: PASS;
  -description: 'Returns a map'; }

/* setup-palettes */
[data-module="Setup palettes"] [data-test="setup-palettes"] .assert-equal {
  -result: PASS;
  -description: 'Returns a merged map of default & custom palettes'; }

/* setup-palettes */
[data-module="Setup palettes"] [data-test="setup-palettes"] .assert-equal {
  -result: PASS;
  -description: 'Returns a custom palette value'; }

/* # rem-calc ---------- */
/* rem-calc */
[data-module="rem-calc"] [data-test="rem-calc"] .assert-equal {
  -result: PASS;
  -description: 'Returns a correct value'; }

/* rem-calc */
[data-module="rem-calc"] [data-test="rem-calc"] .assert-equal {
  -result: PASS;
  -description: 'Returns a correct value'; }

/* rem-calc */
[data-module="rem-calc"] [data-test="rem-calc"] .assert-equal {
  -result: PASS;
  -description: 'Returns a correct value'; }

/* # strip-unit ---------- */
/* strip-unit */
[data-module="strip-unit"] [data-test="strip-unit"] .assert-equal {
  -result: PASS;
  -description: 'strip unit returns a number'; }

/* strip-unit */
[data-module="strip-unit"] [data-test="strip-unit"] .assert-equal {
  -result: PASS;
  -description: 'strip unit returns a number with unit stripped'; }

/* # remify ---------- */
/* remify */
[data-module="remify"] [data-test="remify"] .assert-equal {
  -result: PASS;
  -description: 'remify returns a number'; }

/* remify */
[data-module="remify"] [data-test="remify"] .assert-equal {
  -result: PASS;
  -description: 'remify returns a rem unit'; }

/* remify */
[data-module="remify"] [data-test="remify"] .assert-equal {
  -result: PASS;
  -description: 'remify returns 0 for 0 values'; }

/* # SUMMARY ---------- */
/* 16 Tests: */
/*  - 16 Passed */
/*  - 0 Failed */
/* -------------------- */